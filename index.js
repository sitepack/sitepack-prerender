'use strict';

const path = require('path');
const fs = require('fs');
const dist = 'dist';
const assets = 'assets';
const distPath = path.join(process.cwd(), dist);
const assetsPath = path.join(distPath, assets);

const routes = require(path.join(process.cwd(), 'config', 'route.js'));
const renderHtml = require(path.join(process.cwd(), 'base', 'html.js'));
const getRoutePath = require(path.join(process.cwd(), 'base', 'getRoutePath.js'));
let prerender = require(path.join(assetsPath, 'prerender.js'));

if (prerender.__esModule) {
  prerender = prerender['default'];
}

prerender = prerender(global);

function fileExist(file) {
  let exist = true;
  try {
    fs.statSync(file);
  } catch(e) {
    if (e.errno === -2) {
      exist = false;
    }
  }

  return exist;
}

const scriptSrcs = [ `/${assets}/main.js` ];
const renderCssExist = fileExist(path.join(assetsPath, 'render.css'));
const renderCssHref = `/${assets}/render.css`;

if (renderCssExist) {
  const renderCssStat = fs.statSync(path.join(assetsPath, 'render.css'));
  const prerenderCssStat = fs.statSync(path.join(assetsPath, 'prerender.css'));

  if (renderCssStat.size !== prerenderCssStat.size) {
    throw new Error('The size of css file generated by render.js and prerender.js is not the same!');
  }
}

function renderRoute(route) {
  let routeComponent = require(path.join(assetsPath, `${route.name}.js`));
  if (routeComponent.__esModule) {
    routeComponent = routeComponent['default'];
  }

  const content = prerender(routeComponent);

  const csshrefs = [];
  if (renderCssExist) {
    csshrefs.push(renderCssHref);
  }

  if (fileExist(path.join(assetsPath, `${route.name}.css`))) {
    csshrefs.push(`/${assets}/${route.name}.css`);
  }

  const html = renderHtml(
    route.path,
    content,
    csshrefs,
    scriptSrcs
  );

  return html;
}

function renderEmpty() {
  const content = prerender();

  const cssHrefs = [];
  if (renderCssExist) {
    cssHrefs.push(renderCssHref);
  }

  const html = renderHtml(
    null,
    content,
    cssHrefs,
    scriptSrcs
  );

  return html;
}

function write(fileName, content) {
  fs.writeFile(fileName, content, (err) => {
    if (err) throw err;
    console.log(`[Done] ${fileName}`);
  });
}


// prerender each route
routes.forEach((route) => {
  if (route.skipPrerender || route.path.indexOf(':') !== -1 || route.path.indexOf(';') !== -1) {
    console.log(`[Skip] ${route.name}`);
    return;
  }

  const html = renderRoute(route);

  const routePath = path.join(distPath, getRoutePath(route));
  if (!fileExist(routePath)) {
    fs.mkdirSync(routePath);
  }

  const fileName = path.join(routePath, 'index.html');
  write(fileName, html);

});


// generate 404.html
write(path.join(distPath, '404.html'), renderEmpty());
